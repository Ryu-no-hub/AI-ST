//====================================================================
//      ST AiScript: Arbiter for Kill All game
//====================================================================
include<[_inc_path]\AiScript.dfn>;
include<[_inc_path]\AiScript.mcr>;

#if(_env_var1==0)
 _full_name = "Kill All";
#endif

OpenArbiter(_full_name, 0x00000001);
 
  // Events 
 OpenEvents();
  // Const
  s_win    = 14;
  s_defeat = 15;
  // Used variables :
  //   _RT100-_RT107 - mission conditions

  // Init
  Event(TRUE) 
  { // Start set
    //ActCreateStartSet(PLAYER_ALL,AIREL_MYSELF, LEVEL_DEFINED);
    _ploop_begin
      if(GetPlCiv(_pl_)==CIV_WS)     //--WS--
      { ActCreatePlObj(_plmyself, CONSTRUCTOR, -1, -1, -1, LOGO_UNDEF, "The thing"); 
        if(GetStartSetLevel()>LEVEL_LOW)        
        { ActCreatePlObj(_plmyself, SENTINEL); 
          ActCreatePlObj(_plmyself, SENTINEL); 
          ActCreatePlObj(_plmyself, HUNTER); 
        }
        if(GetStartSetLevel()>LEVEL_MEDIUM)  
        { ActCreatePlObj(_plmyself, CRUISER); 
          ActCreatePlObj(_plmyself, MARAUDER); 
        }
      }
      else
      { if(GetPlCiv(_pl_)==CIV_BO)   //--BO--
        { ActCreatePlObj(_plmyself, ASSEMBLER, -1, -1, -1, LOGO_UNDEF, "The thing"); 
          if(GetStartSetLevel()>LEVEL_LOW)        
          { ActCreatePlObj(_plmyself, FIGHTER); 
            ActCreatePlObj(_plmyself, FIGHTER); 
            ActCreatePlObj(_plmyself, DESTROYER); 
          }
          if(GetStartSetLevel()>LEVEL_MEDIUM)  
          { ActCreatePlObj(_plmyself, HEAVY_CRUISER); 
            ActCreatePlObj(_plmyself, RAIDER); 
          }
        }
        else                         //--SI--
        { ActCreatePlObj(_plmyself, CAPSULE_PROTOTYPE, -1, -1, -1, LOGO_UNDEF, "The thing"); 
          ActCreatePlObj(_plmyself, CAPSULE_PROTOTYPE, -1, -1, -1, LOGO_UNDEF, "The thing"); 
          ActCreatePlObj(_plmyself, CAPSULE_PROTOTYPE, -1, -1, -1, LOGO_UNDEF, "The thing"); 
          if(GetRCLevel() == LEVEL_MEDIUM)
          {
            ActCreatePlObj(_plmyself, CAPSULE_PROTOTYPE);
            ActCreatePlObj(_plmyself, CAPSULE_PROTOTYPE);
          }
          if(GetRCLevel() == LEVEL_HIGH)
          {
            ActCreatePlObj(_plmyself, CAPSULE_PROTOTYPE);
            ActCreatePlObj(_plmyself, CAPSULE_PROTOTYPE);
            ActCreatePlObj(_plmyself, CAPSULE_PROTOTYPE);
          }
          if(GetStartSetLevel()>LEVEL_LOW)        
          { ActCreatePlObj(_plmyself, SHS_SUB); 
            ActCreatePlObj(_plmyself, SHS_SUB); 
            ActCreatePlObj(_plmyself, SHS_SUB); 
          }
          if(GetStartSetLevel()>LEVEL_MEDIUM)  
          { ActCreatePlObj(_plmyself, ESCORT); 
            ActCreatePlObj(_plmyself, USURPER); 
          }
        }
      }
    _ploop_end
    // Off
    actOffEvent(10);actOffEvent(20);actOffEvent(30); actOffEvent(100);
  }
  // On
  Event(getOwnTime()>10)
  { actOnEvent(IsTeamGame() ? 20 : 10);
    actOnEvent(30);
    actOnEvent(100);
  }

  // Player has been killed
  Event(getOwnTime()%3==1, 10)
  { _ploop_begin
     if(!getVar(100+_pl_) && GetPlObjM(_plmyself, AITRG_ALL)==0)
     { actSetVar(100+_pl_, ENDMISS_FAILED);ActOnTimer(_plmyself,10);ActOffFOW(_plmyself);                                 
       _actStringMess(_strf(GetStrRes(s_defeat), GetPlName(_pl_)));
     }
    _ploop_end
    actLockEvent();
  }
  // Player's team has been killed
  Event(getOwnTime()%3==1, 20)
  { _ploop_begin
     if(!getVar(100+_pl_) && GetPlObjM(_plunion, AITRG_ALL)==0)
     { actSetVar(100+_pl_, ENDMISS_FAILED);ActOnTimer(_plmyself,10);ActOffFOW(_plmyself);                                 
       _actStringMess(_strf(GetStrRes(s_defeat), GetPlName(_pl_)));
     }
    _ploop_end
    actLockEvent();
  }
  // Player's enemies have been killed
  Event(getOwnTime()%3==1, 30)
  { 
    _ploop_begin
     if(!getVar(100+_pl_) && GetPlObjM(_plnotally, AITRG_ALL)==0)
     {
       actSetVar(100+_pl_, ENDMISS_ACCOMPL);ActOnTimer(_plmyself,10);ActOffFOW(_plmyself);                                 
       _actStringMess(_strf(GetStrRes(s_win), GetPlName(_pl_)));
     }
    _ploop_end
    actLockEvent();
  }
  // The final phase 
  Event(TRUE, 100)
  { _ploop_begin
     if(getVar(100+_pl_)>0 && GetTimerTime(_pl_)==0)
     { ActOffTimer(_plmyself);ActTotalStatistics(_plmyself, 10);ActEndMiss(_plmyself, getVar(100+_pl_));actSetVar(100+_pl_, -1);
     }
    _ploop_end
    actLockEvent();
  }

  EventPlObjCreated(TRUE)
  {
    ActSetName("The thing", _PI5,_PI6,_PI7);
    ActLockEvent();
  }

  EventPlObjCreated(_PI3 == SILICON_EXTRACTOR)
  {
    ActSetName("SM", _PI5,_PI6,_PI7);
    ActLockEvent();
  }

//  EventPlObjKilled(TRUE)
//  {
//    ActStringMess(PLAYER_ALL, AIREL_MYSELF, _PS1 + " killed " + _PS0)
//    ActLockEvent();
//  }


////////////// Debug //////////////////

EventInput(_PI0==7){ActDelPlObjEx(PLAYER_0, AIREL_MYSELF, AITRG_ALL);actLockEvent();}
EventInput(_PI0==0){ActDelPlObjEx(PLAYER_1, AIREL_MYSELF, AITRG_ALL);actLockEvent();}
EventInput(_PI0==1){ActDelPlObjEx(PLAYER_2, AIREL_MYSELF, AITRG_ALL);actLockEvent();}
EventInput(_PI0==2){ActDelPlObjEx(PLAYER_3, AIREL_MYSELF, AITRG_ALL);actLockEvent();}
EventInput(_PI0==3){ActDelPlObjEx(PLAYER_4, AIREL_MYSELF, AITRG_ALL);actLockEvent();}
EventInput(_PI0==4){ActDelPlObjEx(PLAYER_5, AIREL_MYSELF, AITRG_ALL);actLockEvent();}
EventInput(_PI0==5){ActDelPlObjEx(PLAYER_6, AIREL_MYSELF, AITRG_ALL);actLockEvent();}
EventInput(_PI0==6){ActDelPlObjEx(PLAYER_7, AIREL_MYSELF, AITRG_ALL);actLockEvent();}

/* 
enem_boats = GetPlObjM(PLAYER_CURR, AIREL_ENEMYS, AITRG_BOATALL);
enem_tlo   = GetPlObjM(PLAYER_CURR, AIREL_ENEMYS, AITRG_TLOALL);
enem_gold  = GetPlRes(PLAYER_CURR, AIREL_ENEMYS, GOLD);
enem_cor   = GetPlRes(PLAYER_CURR, AIREL_ENEMYS, CORIUM);
enem_metal = GetPlRes(PLAYER_CURR, AIREL_ENEMYS, METAL, );
*/

 CloseEvents();

CloseArbiter();
