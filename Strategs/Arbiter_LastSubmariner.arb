include<[_inc_path]\AiScript.dfn>;
include<[_inc_path]\AiScript.mcr>;
include<[_inc_path]\Strategs\CONST_LastSubmariner.dfn>;
/*
    _RT100 - начальный индекс чтения из String Table
    _RT101 - тип артефакта M, L, S, XL
    _RT102 - value артефакта
    _RT103 - расса - WS, BO, SI
    _RT104, _RT106 - счетчики генерируемых субмарин
    _RT105 - ИД субмариный
    _RT107 - флаг награды: 1 - ресурсы 2 - субмарина 3 - технология
    _RT108 - кол-во ресурсов награды
    _RT109 - ИД субмарины WS в награде
    _RT110 - ИД субмарины BO в награде
    _RT111 - ИД субмарины SI в награде
    _RT112-127 - x,y первого объекта каждого игрока
    _RT128 - кол-во игроков
    _RT129 - размер карты
*/
OpenArbiter("LastSubmariner100");
    OpenEvents();

        s_win    = 14;
        s_defeat = 15;
        ofst = 20;

        Event(TRUE) 
        {
            _ploop_begin
                if(GetPlCiv(_pl_)==CIV_WS) //--WS--
                {
                    ActCreatePlObj(_plmyself, CONSTRUCTOR, -1, -1, -1, LOGO_UNDEF, "Start object");
                }
                else
                { 
                    if(GetPlCiv(_pl_)==CIV_BO) //--BO--
                    {
                        ActCreatePlObj(_plmyself, ASSEMBLER, -1, -1, -1, LOGO_UNDEF, "Start object");
                    }
                    else // --SI--
                    {
                        ActCreatePlObj(_plmyself, CAPSULE_PROTOTYPE, -1, -1, -1, LOGO_UNDEF, "Start object"); 
                        ActCreatePlObj(_plmyself, CAPSULE_PROTOTYPE, -1, -1, -1, LOGO_UNDEF, "Start object"); 
                        ActCreatePlObj(_plmyself, CAPSULE_PROTOTYPE, -1, -1, -1, LOGO_UNDEF, "Start object");
                        ActCreatePlObj(_plmyself, CAPSULE_PROTOTYPE, -1, -1, -1, LOGO_UNDEF, "Start object"); 
                        ActCreatePlObj(_plmyself, CAPSULE_PROTOTYPE, -1, -1, -1, LOGO_UNDEF, "Start object");
                    }
                }
            _ploop_end
        }

        // создание артефактов
        Event(TRUE)
        {
            _ploop_begin
                if(IsPlObjExist(_pl_, "Start object", 24, 25, 26, 27))
                {
                    //_actStringMess(_inttostr(_RT24) + " " + _inttostr(_RT25))
                    if(_pl_==PLAYER_0){_RT112:=_RT24; _RT113:=_RT25;}
                    if(_pl_==PLAYER_1){_RT114:=_RT24; _RT115:=_RT25;}
                    if(_pl_==PLAYER_2){_RT116:=_RT24; _RT117:=_RT25;}
                    if(_pl_==PLAYER_3){_RT118:=_RT24; _RT119:=_RT25;}
                    if(_pl_==PLAYER_4){_RT120:=_RT24; _RT121:=_RT25;}
                    if(_pl_==PLAYER_5){_RT122:=_RT24; _RT123:=_RT25;}
                    if(_pl_==PLAYER_6){_RT124:=_RT24; _RT125:=_RT25;}
                    if(_pl_==PLAYER_7){_RT126:=_RT24; _RT127:=_RT25;}
                    _actStringMess(_inttostr(_RT24) + " " + _inttostr(_RT25))
                }
                _RT128 += 4;
            _ploop_end


            _RT129 := GetRes(SILICON, 0, 0, 0, 1, 200, 0) / 80;
            //_actStringMess("Silicon in line / 80 " + _inttostr(GetRes(SILICON, 0, 0, 0, 1, 200, 0) / 80))


            while (_RT128 > 0)
            {
                //_RT132 := 5; offset
                _RT130 := GetRnd(0, _RT129);
                _RT131 := GetRnd(0, _RT129);
                if(
                    (
                        (_RT130 < _RT112 - ofst) || (_RT130 > _RT112 + ofst)    // x
                        || (_RT131 < _RT113 - ofst) || (_RT131 > _RT113 + ofst) // y
                    ) &&
                    (
                        (_RT130 < _RT114 - ofst) || (_RT130 > _RT114 + ofst)    // x
                        || (_RT131 < _RT115 - ofst) || (_RT131 > _RT115 + ofst) // y
                    ) &&(
                        (_RT130 < _RT116 - ofst) || (_RT130 > _RT116 + ofst)    // x
                        || (_RT131 < _RT117 - ofst) || (_RT131 > _RT117 + ofst) // y
                    ) &&(
                        (_RT130 < _RT118 - ofst) || (_RT130 > _RT118 + ofst)    // x
                        || (_RT131 < _RT119 - ofst) || (_RT131 > _RT119 + ofst) // y
                    ) &&(
                        (_RT130 < _RT120 - ofst) || (_RT130 > _RT120 + ofst)    // x
                        || (_RT131 < _RT121 - ofst) || (_RT131 > _RT121 + ofst) // y
                    ) &&(
                        (_RT130 < _RT122 - ofst) || (_RT130 > _RT122 + ofst)    // x
                        || (_RT131 < _RT123 - ofst) || (_RT131 > _RT123 + ofst) // y
                    ) &&(
                        (_RT130 < _RT124 - ofst) || (_RT130 > _RT124 + ofst)    // x
                        || (_RT131 < _RT125 - ofst) || (_RT131 > _RT125 + ofst) // y
                    ) &&(
                        (_RT130 < _RT126 - ofst) || (_RT130 > _RT126 + ofst)    // x
                        || (_RT131 < _RT127 - ofst) || (_RT131 > _RT127 + ofst) // y
                    )
                  )
                {
                    ActCreateArt( TART_X_BOX, GetRnd(1,3), _RT130, _RT131,  GetRnd(0,4),
                                  "", 
                                  "Unknown technology", 
                                  VEFF_NONE);
                    _RT128 -= 1;
                }
            }

            _actStringMess("Artefacts on map: " + _inttostr(GetArt()))
        }

        EventPlObjCreated(_PI3==TECHCENTER || _PI3==RESEARCH_LABORATORY || _PI3==COMMAND_HUB)
        {
            ActSetName("Research", _PI5, _PI6, _PI7);
            actLockEvent();
        }

        EventPlObjCreated(_PI3==TRADECENTER || _PI3==MARKET || _PI3==ENERGY_CONVERTER)
        {
            ActSetName("Market", _PI5, _PI6, _PI7);
            actLockEvent();
        }

        EventArtLoaded(TRUE)
        {
            //ActSetName("Active platf", _PI15, _PI16, _PI17);
            //_actStringMess("Artefact loaded")

            //if(IsPlObjExist(_PI10, "Market", 24, 25, 26, 27))
            if(IsPlObjExist(_PI10, "Research", 24, 25, 26, 27))
            {
                ActObjSelectM(_PI10, AIREL_MYSELF, AITRG_BOATSUPPLY, _PI14, _PI15, _PI16, _PI17, _PI15, _PI16, _PI17);
                ActCreateFleet(_PI10, AIREL_MYSELF, "platform", _PI11, AISF_NONE);
                //ActFCmdMove(_PI10, AIREL_MYSELF, GetFleetNum(_PI10, "platform"), _RT24, _RT25, _RT26 + 1);
                ActFCmdUnLoad(_PI10, AIREL_MYSELF, GetFleetNum(_PI10, "platform"), _RT24, _RT25, _RT26 + 1);

                //ActFCmdUnLoad(_PI10, AIREL_MYSELF, GetFleetNum(_PI10, "platform"), _RT24, _RT25, _RT26, 1);
            }
            actLockEvent();
        }

        EventFCmdDone(TRUE)
        {
            //_actStringMess("cmd done: " + _inttostr(_PI0) + " " + _inttostr(_PI3) + " " + _inttostr(_PI4) + " " + _PS0)
            //ActFCmdUnLoad(_PI0, AIREL_MYSELF, GetFleetNum(_PI10, "platform"), x, y, z[, mode, time]);
            actLockEvent();
        }

        // Del artefact after Unloaded
        EventArtUnLoaded(TRUE)
        {
            //ActSetName("Art Del", _PI5, _PI6, _PI7);
            //ActDelArt(TART_UNDEFINED, "Art Del");
            //ActDelArt(TART_UNDEFINED, "", _PI5, _PI6, _PI7, _PI5, _PI6, _PI7, VEFF_TELEPORT);
            //ActDelArt(TART_X_BOX, "", _PI15, _PI16, _PI17, _PI15, _PI16, _PI17, VEFF_TELEPORT);
            ActDelArt(TART_UNDEFINED, "", _PI15, _PI16, _PI17, _PI15, _PI16, _PI17, VEFF_DISSOLVE);
            actLockEvent();
        }

    CloseEvents();
CloseArbiter();