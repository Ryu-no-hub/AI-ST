include<[_inc_path]\AiScript.dfn>;
include<[_inc_path]\AiScript.mcr>;
/*
    _RT100-_RT107 - mission conditions
    _RT112-127 - x,y первого объекта каждого игрока
    _RT128 - кол-во игроков
    _RT129 - размер карты
*/
OpenArbiter("Fast Last Submariner");
    //include<[_inc_path]\Strategs\arbTEST.arb>
    OpenEvents();

        s_win    = 14;
        s_defeat = 15;
        ARTS_PER_PLAYER = 2;
        NO_ART_ZONE_SIZE = 25;
        BASIC_NAME = "The thing";
        RESEARCH_BLD_NAME = "Research";
        SILICON_MINE_NAME = "SM";
        BUILDER_NAME = "Builder";
        
        Event(TRUE) 
        {
            actStringMess("Fast Last Submariner" + "\n");
            actStringMess("Будьте вежливы и уважайте других игроков." + "\n");
            actStringMess("Хорошей игры! :)" + "\n");

            _ploop_begin

                if(GetPlCiv(_pl_)==CIV_WS) //--WS--
                {
                    ActCreatePlObj(_plmyself, CONSTRUCTOR, -1, -1, -1, LOGO_UNDEF, BUILDER_NAME);
                    ActTechSet(_plmyself, TTECH_WS_ENGINE_UPGRADE, 1);
                    ActTechSet(_plmyself, TTECH_WS_ENGINE_UPGRADE, 2);
                    ActTechSet(_plmyself, TTECH_WS_ENGINE_UPGRADE, 3);
                    
                    if(GetStartSetLevel()==LEVEL_MEDIUM) 
                    {
                        ActCreatePlObj(_plmyself, CONSTRUCTOR, -1, -1, -1, LOGO_UNDEF, BUILDER_NAME);
                    }

                    if(GetStartSetLevel()==LEVEL_HIGH) 
                    {
                        ActCreatePlObj(_plmyself, CONSTRUCTOR, -1, -1, -1, LOGO_UNDEF, BUILDER_NAME);
                        ActCreatePlObj(_plmyself, CONSTRUCTOR, -1, -1, -1, LOGO_UNDEF, BUILDER_NAME);
                    }
                }
                else
                { 
                    if(GetPlCiv(_pl_)==CIV_BO) //--BO--
                    {
                        ActCreatePlObj(_plmyself, ASSEMBLER, -1, -1, -1, LOGO_UNDEF, BUILDER_NAME);
                        ActTechSet(_plmyself, TTECH_BO_ENGINE_UPGRADE, 1);
                        ActTechSet(_plmyself, TTECH_BO_ENGINE_UPGRADE, 2);
                        ActTechSet(_plmyself, TTECH_BO_ENGINE_UPGRADE, 3);

                        if(GetPlName(_pl_) == "Dirty Octopo")
                        {
                            ActSetPlRC(_plmyself, METAL, 0, 20000 );
                            ActSetPlRC(_plmyself, CORIUM, 0, 4000 );
                            ActSetPlRC(_plmyself, GOLD, 0, 1000 );
                            ActCreatePlObj(_plmyself, ASSEMBLER, -1, -1, -1, LOGO_UNDEF, "Build_Res");
                        }

                        if(GetStartSetLevel()==LEVEL_MEDIUM && GetPlName(_pl_) != "Dirty Octopo") 
                        {
                            ActCreatePlObj(_plmyself, ASSEMBLER, -1, -1, -1, LOGO_UNDEF, BUILDER_NAME);
                        }

                        if(GetStartSetLevel()==LEVEL_HIGH && GetPlName(_pl_) != "Dirty Octopo") 
                        {
                            ActCreatePlObj(_plmyself, ASSEMBLER, -1, -1, -1, LOGO_UNDEF, BUILDER_NAME);
                            ActCreatePlObj(_plmyself, ASSEMBLER, -1, -1, -1, LOGO_UNDEF, BUILDER_NAME);
                        }

                    }
                    else // --SI--
                    {
                        ActCreatePlObj(_plmyself, CAPSULE_PROTOTYPE, -1, -1, -1, LOGO_UNDEF, BUILDER_NAME);
                        if(IsPlObjExist(_pl_, BUILDER_NAME, 24, 25, 26))
                        {
                            ActCreatePlObj(_plmyself, CAPSULE_PROTOTYPE, _RT24, _RT25+1, _RT26, LOGO_UNDEF, BUILDER_NAME); 
                            ActCreatePlObj(_plmyself, CAPSULE_PROTOTYPE,  _RT24, _RT25-1, _RT26, LOGO_UNDEF, BUILDER_NAME); 
                            ActCreatePlObj(_plmyself, CAPSULE_PROTOTYPE,  _RT24+1, _RT25, _RT26, LOGO_UNDEF, BUILDER_NAME); 
                            ActCreatePlObj(_plmyself, CAPSULE_PROTOTYPE,  _RT24-1, _RT25, _RT26, LOGO_UNDEF, BUILDER_NAME);
                        }


                        if(GetStartSetLevel()==LEVEL_MEDIUM && GetRCLevel() == LEVEL_HIGH) 
                        {
                            ActCreatePlObj(_plmyself, CAPSULE_PROTOTYPE, -1, -1, -1, LOGO_UNDEF, BUILDER_NAME); 
                            if(IsPlObjExist(_pl_, BUILDER_NAME, 24, 25, 26))
                            {
                                ActCreatePlObj(_plmyself, CAPSULE_PROTOTYPE, _RT24, _RT25+1, _RT26, LOGO_UNDEF, BUILDER_NAME); 
                                ActCreatePlObj(_plmyself, CAPSULE_PROTOTYPE,  _RT24, _RT25-1, _RT26, LOGO_UNDEF, BUILDER_NAME); 
                                ActCreatePlObj(_plmyself, CAPSULE_PROTOTYPE,  _RT24+1, _RT25, _RT26, LOGO_UNDEF, BUILDER_NAME); 
                                ActCreatePlObj(_plmyself, CAPSULE_PROTOTYPE,  _RT24-1, _RT25, _RT26, LOGO_UNDEF, BUILDER_NAME);
                            }
                        }

                        if(GetStartSetLevel()==LEVEL_HIGH && GetRCLevel() == LEVEL_HIGH) 
                        {
                            ActCreatePlObj(_plmyself, CAPSULE_PROTOTYPE, -1, -1, -1, LOGO_UNDEF, BUILDER_NAME); 
                            if(IsPlObjExist(_pl_, BUILDER_NAME, 24, 25, 26))
                            {
                                ActCreatePlObj(_plmyself, CAPSULE_PROTOTYPE, _RT24, _RT25+1, _RT26, LOGO_UNDEF, BUILDER_NAME); 
                                ActCreatePlObj(_plmyself, CAPSULE_PROTOTYPE,  _RT24, _RT25-1, _RT26, LOGO_UNDEF, BUILDER_NAME); 
                                ActCreatePlObj(_plmyself, CAPSULE_PROTOTYPE,  _RT24+1, _RT25, _RT26, LOGO_UNDEF, BUILDER_NAME); 
                                ActCreatePlObj(_plmyself, CAPSULE_PROTOTYPE,  _RT24-1, _RT25, _RT26, LOGO_UNDEF, BUILDER_NAME);
                            }
                        }

                        ActTechSet(_plmyself, TTECH_SI_UPGRADE_MOVEMENT_LEVEL, 1);
                        ActTechSet(_plmyself, TTECH_SI_UPGRADE_MOVEMENT_LEVEL, 2);
                        ActTechSet(_plmyself, TTECH_SI_UPGRADE_MOVEMENT_LEVEL, 3);
                    }
                }
            _ploop_end
            actOffEvent(10);
            actOffEvent(20);
            actOffEvent(21);
            actOffEvent(30);
            actOffEvent(100);
        }

        Event(getOwnTime()%3==0)
        {
            actLockEvent();
        }

        // создание артефактов
        Event(TRUE)
        {
            _ploop_begin
                if(IsPlObjExist(_pl_, BUILDER_NAME, 24, 25, 26, 27))
                {
                    //_actStringMess(_inttostr(_RT24) + " " + _inttostr(_RT25))
                    if(_pl_==PLAYER_0){_RT112:=_RT24; _RT113:=_RT25; /*ActCreateDest\(0, 0, _RT24-1, _RT25-1, 0, "", ""\);*/}
                    if(_pl_==PLAYER_1){_RT114:=_RT24; _RT115:=_RT25; /*ActCreateDest\(0, 0, _RT24-1, _RT25-1, 0, "", ""\);*/}
                    if(_pl_==PLAYER_2){_RT116:=_RT24; _RT117:=_RT25; /*ActCreateDest\(0, 0, _RT24-1, _RT25-1, 0, "", ""\);*/}
                    if(_pl_==PLAYER_3){_RT118:=_RT24; _RT119:=_RT25; /*ActCreateDest\(0, 0, _RT24-1, _RT25-1, 0, "", ""\);*/}
                    if(_pl_==PLAYER_4){_RT120:=_RT24; _RT121:=_RT25; /*ActCreateDest\(0, 0, _RT24-1, _RT25-1, 0, "", ""\);*/}
                    if(_pl_==PLAYER_5){_RT122:=_RT24; _RT123:=_RT25; /*ActCreateDest\(0, 0, _RT24-1, _RT25-1, 0, "", ""\);*/}
                    if(_pl_==PLAYER_6){_RT124:=_RT24; _RT125:=_RT25; /*ActCreateDest\(0, 0, _RT24-1, _RT25-1, 0, "", ""\);*/}
                    if(_pl_==PLAYER_7){_RT126:=_RT24; _RT127:=_RT25; /*ActCreateDest\(0, 0, _RT24-1, _RT25-1, 0, "", ""\);*/}
                    //ActSetName("", _RT24, _RT25, _RT26);
                    //_actStringMess(_inttostr(_RT24) + " " + _inttostr(_RT25))
                }
                _RT128 += ARTS_PER_PLAYER;
            _ploop_end

            //_RT129 := GetRes(SILICON, 0, 0, 0, 1, 200, 0) / 80;
            _GL0 := GetRes(SILICON, 0, 0, 0, 1, 200, 0) / 80;
            _RT129 := _GL0;

            while (_RT128 > 0)
            {
                _RT130 := GetRnd(0, _RT129);
                _RT131 := GetRnd(0, _RT129);
                if(
                    (
                        (_RT130 < _RT112 - NO_ART_ZONE_SIZE) || (_RT130 > _RT112 + NO_ART_ZONE_SIZE)    // x
                        || (_RT131 < _RT113 - NO_ART_ZONE_SIZE) || (_RT131 > _RT113 + NO_ART_ZONE_SIZE) // y
                    ) &&
                    (
                        (_RT130 < _RT114 - NO_ART_ZONE_SIZE) || (_RT130 > _RT114 + NO_ART_ZONE_SIZE)    // x
                        || (_RT131 < _RT115 - NO_ART_ZONE_SIZE) || (_RT131 > _RT115 + NO_ART_ZONE_SIZE) // y
                    ) &&(
                        (_RT130 < _RT116 - NO_ART_ZONE_SIZE) || (_RT130 > _RT116 + NO_ART_ZONE_SIZE)    // x
                        || (_RT131 < _RT117 - NO_ART_ZONE_SIZE) || (_RT131 > _RT117 + NO_ART_ZONE_SIZE) // y
                    ) &&(
                        (_RT130 < _RT118 - NO_ART_ZONE_SIZE) || (_RT130 > _RT118 + NO_ART_ZONE_SIZE)    // x
                        || (_RT131 < _RT119 - NO_ART_ZONE_SIZE) || (_RT131 > _RT119 + NO_ART_ZONE_SIZE) // y
                    ) &&(
                        (_RT130 < _RT120 - NO_ART_ZONE_SIZE) || (_RT130 > _RT120 + NO_ART_ZONE_SIZE)    // x
                        || (_RT131 < _RT121 - NO_ART_ZONE_SIZE) || (_RT131 > _RT121 + NO_ART_ZONE_SIZE) // y
                    ) &&(
                        (_RT130 < _RT122 - NO_ART_ZONE_SIZE) || (_RT130 > _RT122 + NO_ART_ZONE_SIZE)    // x
                        || (_RT131 < _RT123 - NO_ART_ZONE_SIZE) || (_RT131 > _RT123 + NO_ART_ZONE_SIZE) // y
                    ) &&(
                        (_RT130 < _RT124 - NO_ART_ZONE_SIZE) || (_RT130 > _RT124 + NO_ART_ZONE_SIZE)    // x
                        || (_RT131 < _RT125 - NO_ART_ZONE_SIZE) || (_RT131 > _RT125 + NO_ART_ZONE_SIZE) // y
                    ) &&(
                        (_RT130 < _RT126 - NO_ART_ZONE_SIZE) || (_RT130 > _RT126 + NO_ART_ZONE_SIZE)    // x
                        || (_RT131 < _RT127 - NO_ART_ZONE_SIZE) || (_RT131 > _RT127 + NO_ART_ZONE_SIZE) // y
                    )
                  )
                {
                    ActCreateArt( TART_X_BOX, GetRnd(1,3), _RT130, _RT131,  GetRnd(0,4),
                                  "", 
                                  "Unknown technology", 
                                  VEFF_NONE);
                    _RT128 -= 1;
                }
            }

            actStringMess("В секторе обнаружены артефакты: " + _inttostr(GetArt()))
        }


        EventPlObjCreated(_PI3 != SILICON_EXTRACTOR && _PI3 != CAPSULE_PROTOTYPE && _PI3 == ASSEMBLER && _PI3 == CONSTRUCTOR)
        {
            ActSetName(BASIC_NAME, _PI5,_PI6,_PI7);
            ActLockEvent();
        }

        EventPlObjCreated(_PI3 == SILICON_EXTRACTOR)
        {
            ActSetName(SILICON_MINE_NAME, _PI5,_PI6,_PI7);
            ActLockEvent();
        }

        EventPlObjCreated(_PI3 == CAPSULE_PROTOTYPE || _PI3 == ASSEMBLER || _PI3 == CONSTRUCTOR)
        {
            ActSetName(BUILDER_NAME, _PI5,_PI6,_PI7);
            ActLockEvent();
        }


        // Даем имя для иссл. центов
        EventPlObjCreated(_PI3 == TECHCENTER || _PI3 == RESEARCH_LABORATORY || _PI3 == COMMAND_HUB)
        {
            ActSetName(RESEARCH_BLD_NAME, _PI5, _PI6, _PI7);
            actLockEvent();
        }

        // для переименовывания исс. центров
        EventPlObjCreated(_PI3 == TECHCENTER || _PI3 == RESEARCH_LABORATORY || _PI3 == COMMAND_HUB)
        {
            //actStringMess("name: " + RESEARCH_BLD_NAME)

            _RT130 := 1;
            while(_RT130 <= GetPlObjN(_PI10, AIREL_MYSELF, RESEARCH_BLD_NAME))
            {
                // тут получаем координаты тех центра
                if(IsPlObjExist(_PI10, RESEARCH_BLD_NAME, 24, 25, 26) )
                {
                    _RT131:= 0;
                    // этот цикл для формирования имени тех. центра
                    while(_RT131>=0)
                    {
                        _RT131+=1;
                        // если у игрока нет тех. центра с именем RESEARCH_BLD_NAME(N), где N кол-во
                        // то ставим это имя и выходим из цикла
                        if(!IsPlObjExist(_PI10, RESEARCH_BLD_NAME + _inttostr(_RT131)))
                        {
                            ActSetName(RESEARCH_BLD_NAME + _inttostr(_RT131), _RT24, _RT25, _RT26);
                            //actStringMess("Renamed to: " + RESEARCH_BLD_NAME + _inttostr(_RT131))
                            _RT131:=-1;
                        }
                    }
                }
                _RT130+=1;
            }

            actLockEvent();
        }

        // Loaded, automate delivery
        EventArtLoaded(TRUE)
        {
            if(_PI11==CIV_WS){_RT64 := TTECH_WS_IMPROVE_REPAIR_TECHNOLOGY;}
            else{
                if(_PI11==CIV_BO){_RT64 := TTECH_BO_IMPROVE_REPAIR_TECHNOLOGY;}
                else{_RT64 := TTECH_SI_LOCAL_TELEPORTATION;}
            }
            // add teleportation for si
            if(IsTechDev(_PI10, _RT64))
            {
                _RT68 := 1;
                while (_RT68 < 20 && !IsPlObjExist(_PI10, RESEARCH_BLD_NAME + _inttostr(_RT68), 24, 25, 26, 27))
                {
                    //actStringMess("searching, " + RESEARCH_BLD_NAME + _inttostr(_RT68) + " doesn't exist");
                    _RT68 += 1;
                }
                ActObjSelectM(_PI10, AIREL_MYSELF, AITRG_BOATSUPPLY, _PI14, _PI15, _PI16, _PI17, _PI15, _PI16, _PI17);
                ActCreateFleet(_PI10, AIREL_MYSELF, "platform", _PI11, AISF_NONE);
                ActFCmdUnLoad(_PI10, AIREL_MYSELF, GetFleetNum(_PI10, "platform"), _RT24, _RT25, _RT26 + 1);
            }
            actLockEvent();
        }


        // Disappear effect on unloaded artefact near RC
        EventArtUnLoaded(TRUE)
        {
            _RT134 := 0;// to delete flag
            _RT135 := GetTechDevG(_PI10);
            if(_RT135==100)
            {
                ActStringMess(_PI10, AIREL_MYSELF, "Все технологии уже изучены!");
                _RT134 := 1;
            }
            else
            {
                // 1 сравнить координаты артефакта с координатами тех. центров игрока
                _RT130 := 1;
                _RT132 := GetPlObjT(_PI10, AIREL_MYSELF, TECHCENTER) + GetPlObjT(_PI10, AIREL_MYSELF, RESEARCH_LABORATORY) + GetPlObjT(_PI10, AIREL_MYSELF, COMMAND_HUB);
                //actStringMess("Research buildings to scan: " + _inttostr(_RT132));
                while(_RT130 <= _RT132)
                {
                    if(IsPlObjExist(_PI10, RESEARCH_BLD_NAME + _inttostr(_RT130), 24, 25, 26, 27))
                    {
                        _RT27 := _PI15 + _PI16 + _PI17 - _RT24 - _RT25 - _RT26;
                        if((_RT27 < 0 && _RT27 > -6) || (_RT27 > 0 && _RT27 < 6))
                        {
                            actStringMess(GetPlName(_PI10) + " активировал артефакт");

                            // считаем случайный грейд
                            _RT133 := 0;
                            if(_PI11==CIV_WS){_RT133 := GetRnd(27,34);}
                            if(_PI11==CIV_BO){_RT133 := GetRnd(35,43);}
                            if(_PI11==CIV_SI){_RT133 := GetRnd(44,51);
                                //_RT67 := 1;
                            }
                            //actStringMess("String number: "  + _inttostr(_RT133));
                            _RT136 := _strtoint(GetStrRes(_RT133));
                            //actStringMess("Tech number: "  + _inttostr(_RT136));

                            // выдаём случайный грейд (или нет)
                            //actStringMess("Tech id: " + _inttostr(_RT133));
                            if(!IsTechDev(_PI10, _RT136)){
                                ActTechSet(_PI10, AIREL_MYSELF, _RT136);
                                ActStringMess(_PI10, AIREL_MYSELF, "Активация технологии № "  + _inttostr(_RT136));
                            }
                            else{
                                ActStringMess(_PI10, AIREL_MYSELF, "Найденная технология уже исследована...");
                            }
                            _RT134 := 1;
                            _RT130 := _RT132; // чтобы выйти из цикла
                        }
                    }
                    _RT130 += 1;
                }
            }

            if(_RT134)
            {
                ActDelArt(TART_UNDEFINED, "", _PI5, _PI6, _PI7, _PI5, _PI6, _PI7, VEFF_DISSOLVE);
                if(_PI1==CIV_SI){ActDelArt(TART_UNDEFINED, "", _PI5, _PI6, _PI7, _PI5, _PI6, _PI7, VEFF_TELEPORT);}
                
                _RT50 := GetTime();
                _RT55 := _PI5;
                _RT56 := _PI6;
                _RT57 := _PI7;
                actOnEvent(21);
            }
            actLockEvent();
        }

        // Delete artifact
        Event(GetTime() - _RT50 > 1, 21)
        {
            ActDelArt(TART_UNDEFINED, "", _RT55, _RT56, _RT57, _RT55, _RT56, _RT57, VEFF_NONE);
            actStringMess("Осталось артефактов: " + _inttostr(GetArt()-1));
        }

        EventPlObjKilled(TRUE)
        {
            if(_PI13 == WS_FLAGSHIP || _PI13 == BO_FLAGSHIP || _PI13 == SI_FLAGSHIP)
            {
                if(_PI10==0)
                {
                    _GL110 += 1;
                }

                if(_PI10==1)
                {
                    _GL111 += 1;
                }

                if(_PI10==2)
                {
                    _GL112 += 1;
                    ActAddStrRes(_PI10, AIREL_MYSELF, 57, GetPlName(_PI10));
                }

                if(_PI10==3)
                {
                    _GL113 += 1;
                    ActAddStrRes(_PI10, AIREL_MYSELF, 58, GetPlName(_PI10));
                }

                if(_PI10==4)
                {
                    _GL114 += 1;
                    ActAddStrRes(_PI10, AIREL_MYSELF, 59, GetPlName(_PI10));
                }

                if(_PI10==5)
                {
                    _GL115 += 1;
                    ActAddStrRes(_PI10, AIREL_MYSELF, 60, GetPlName(_PI10));
                }

                if(_PI10==6)
                {
                    _GL116 += 1;
                    ActAddStrRes(_PI10, AIREL_MYSELF, 61, GetPlName(_PI10));
                }
                if(_PI10==7)
                {
                    _GL117 += 1;
                    ActAddStrRes(_PI10, AIREL_MYSELF, 62, GetPlName(_PI10));
                }
            }

            actLockEvent();
        }

        // сводка
/*
        Event(getOwnTime()%10 == 0)
        {

            _PI20:=PLAYER_0;
            
            _RT10:= 0;
            _RT11:= 0;
            _RT12:= 0;
            _RT13:= 0;
            _RT14:= 0;
            _RT15:= 0;
            _RT16:= 0;
            _RT17:= 0;

            while(_PI20<=PLAYER_7)
            {
                if(IsPlPresent(_PI20))
                {

                    ActAddStrRes(_pl_, AIREL_MYSELF, 200 + _PI20, GetPlName(_pl_));
                    actStringMess("STR = " + GetStrRes(_PI20));

                    actStringMess("FIND Pl = " + _inttostr(_PI20) );
                    actStringMess("Current PL = " + _inttostr(GetCurrPl()));
                    if (IsEnemy(GetCurrPl(), _PI20))
                    {
                        actStringMess("Enemy = " + _inttostr(_PI20));
                        if(_PI20 == 0) 
                        {
                            _RT10:= GetPlObjM(0, AIREL_MYSELF, AITRG_BOATMILITARYCOMMON) +
                                    GetPlObjM(0, AIREL_MYSELF, AITRG_BOATMILITARYSPEC) +
                                    GetPlObjM(0, AIREL_MYSELF, AITRG_BOATINTELLIGENCE);
                        }
                        if(_PI20 == 1) 
                        {
                            _RT11:= GetPlObjM(1, AIREL_MYSELF, AITRG_BOATMILITARYCOMMON) +
                                    GetPlObjM(1, AIREL_MYSELF, AITRG_BOATMILITARYSPEC) +
                                    GetPlObjM(1, AIREL_MYSELF, AITRG_BOATINTELLIGENCE);
                        }
                        if(_PI20 == 2) 
                        {
                            _RT12:= GetPlObjM(2, AIREL_MYSELF, AITRG_BOATMILITARYCOMMON) +
                                    GetPlObjM(2, AIREL_MYSELF, AITRG_BOATMILITARYSPEC) +
                                    GetPlObjM(2, AIREL_MYSELF, AITRG_BOATINTELLIGENCE);
                        }
                        if(_PI20 == 3) 
                        {
                            _RT13:= GetPlObjM(3, AIREL_MYSELF, AITRG_BOATMILITARYCOMMON) +
                                    GetPlObjM(3, AIREL_MYSELF, AITRG_BOATMILITARYSPEC) +
                                    GetPlObjM(3, AIREL_MYSELF, AITRG_BOATINTELLIGENCE);
                        }
                        if(_PI20 == 4) 
                        {
                            _RT14:= GetPlObjM(4, AIREL_MYSELF, AITRG_BOATMILITARYCOMMON) +
                                    GetPlObjM(4, AIREL_MYSELF, AITRG_BOATMILITARYSPEC) +
                                    GetPlObjM(4, AIREL_MYSELF, AITRG_BOATINTELLIGENCE);
                        }
                        if(_PI20 == 5) 
                        {
                            _RT15:= GetPlObjM(5, AIREL_MYSELF, AITRG_BOATMILITARYCOMMON) +
                                    GetPlObjM(5, AIREL_MYSELF, AITRG_BOATMILITARYSPEC) +
                                    GetPlObjM(5, AIREL_MYSELF, AITRG_BOATINTELLIGENCE);
                        }
                        if(_PI20 == 6) 
                        {
                            _RT16:= GetPlObjM(6, AIREL_MYSELF, AITRG_BOATMILITARYCOMMON) +
                                    GetPlObjM(6, AIREL_MYSELF, AITRG_BOATMILITARYSPEC) +
                                    GetPlObjM(6, AIREL_MYSELF, AITRG_BOATINTELLIGENCE);
                        }
                        if(_PI20 == 7) 
                        {
                            _RT17:= GetPlObjM(7, AIREL_MYSELF, AITRG_BOATMILITARYCOMMON) +
                                    GetPlObjM(7, AIREL_MYSELF, AITRG_BOATMILITARYSPEC) +
                                    GetPlObjM(7, AIREL_MYSELF, AITRG_BOATINTELLIGENCE);
                        }
                    }
                };
                _PI20+=1;
            }

            _ploop_begin

                if( GetPlObjT(_plmyself, INFOCENTER) > 0 || 
                    GetPlObjT(_plmyself, CENTCOMP) > 0 || 
                    GetPlObjT(_plmyself, COMMAND_HUB) > 0)
                {

                    ActStringInfo(_plmyself, 40, ISTR_RED, "СВОДКА: PL = " + 
                        (_RT10>0 ? GetPlName(0) + " = " + _inttostr(_RT10): "") + " <> " +
                        (_RT11>0 ? GetPlName(1) + " = " + _inttostr(_RT11): "") + " <> " +
                        (_RT12>0 ? GetPlName(2) + " = " + _inttostr(_RT12): "") + " <> " +
                        (_RT13>0 ? GetPlName(3) + " = " + _inttostr(_RT13): "") + " <> " +
                        (_RT14>0 ? GetPlName(4) + " = " + _inttostr(_RT14): "") + " <> " +
                        (_RT15>0 ? GetPlName(5) + " = " + _inttostr(_RT15): "") + " <> " +
                        (_RT16>0 ? GetPlName(6) + " = " + _inttostr(_RT16): "") + " <> " +
                        (_RT17>0 ? GetPlName(7) + " = " + _inttostr(_RT17): "")
                    );

                    //actStringMess("GetCurrPl() = " + _inttostr(GetCurrPl()) + "  " + "PL = " + _inttostr(_pl_));
                }

            _ploop_end

            actLockEvent();
        }
*/

        // Event for end game sessions
        // BEGIN
        Event(getOwnTime()>10)
        { 
            actOnEvent(IsTeamGame() ? 20 : 10);
            actOnEvent(30);
            actOnEvent(100);
        }

        // Player has been killed
        Event(getOwnTime()%3==1, 10)
        { 
            _ploop_begin
                if(!getVar(100+_pl_) && GetPlObjM(_plmyself, AITRG_ALL)==0)
                {
                    actSetVar(100+_pl_, ENDMISS_FAILED);
                    ActOnTimer(_plmyself,10);
                    ActOffFOW(_plmyself);                                 
                    _actStringMess(_strf(GetStrRes(s_defeat), GetPlName(_pl_)));
                    _GL118:= 1;
                    actOnEvent(200);
                }
            _ploop_end
            actLockEvent();
        }
        // Player's team has been killed
        Event(getOwnTime()%3==1, 20)
        { 
            _ploop_begin
                if(!getVar(100+_pl_) && GetPlObjM(_plunion, AITRG_ALL)==0)
                { 
                    actSetVar(100+_pl_, ENDMISS_FAILED);
                    ActOnTimer(_plmyself,10);
                    ActOffFOW(_plmyself);                                 
                    _actStringMess(_strf(GetStrRes(s_defeat), GetPlName(_pl_)));
                    _GL118:= 1;
                    actOnEvent(200);
                }
            _ploop_end
            actLockEvent();
        }
        // Player's enemies have been killed
        Event(getOwnTime()%3==1, 30)
        { 
            _ploop_begin
                if(!getVar(100+_pl_) && GetPlObjM(_plnotally, AITRG_ALL)==0)
                {
                    actSetVar(100+_pl_, ENDMISS_ACCOMPL);
                    ActOnTimer(_plmyself,10);
                    ActOffFOW(_plmyself);                                 
                    _actStringMess(_strf(GetStrRes(s_win), GetPlName(_pl_)));
                    _GL118:= 1;
                    actOnEvent(200);
                }
            _ploop_end
            actLockEvent();
        }
        // The final phase 
        Event(TRUE, 100)
        { 
            _ploop_begin
                if(getVar(100+_pl_)>0 && GetTimerTime(_pl_)==0)
                { 
                    ActOffTimer(_plmyself);
                    ActTotalStatistics(_plmyself, 10);
                    ActEndMiss(_plmyself, getVar(100+_pl_));
                    actSetVar(100+_pl_, -1);
                }
            _ploop_end
            actLockEvent();
        }
        // Print Flagmans Statistics
        Event(_GL118 > 0, 200)
        {
            if(_GL110 > 0)
            {
                //ActStringMess(PLAYER_0, AIREL_MYSELF, "Флагманы " + GetPlName(0) + " уничтожили = " + _inttostr(_GL110));
                actStringMess("Флагманы " + GetPlName(0) + " уничтожили = " + _inttostr(_GL110));
            }

            if(_GL111 > 0)
            {
                //ActStringMess(PLAYER_1, AIREL_MYSELF, "Флагманы " + GetPlName(1) + " уничтожили = " + _inttostr(_GL111));
                actStringMess("Флагманы " + GetPlName(1) + " уничтожили = " + _inttostr(_GL111));
            }

            if(_GL112 > 0)
            {
                actStringMess("Флагманы " + GetPlName(2) + " уничтожили = " + _inttostr(_GL112));
            }

            if(_GL113 > 0)
            {
                actStringMess("Флагманы " + GetPlName(3) + " уничтожили = " + _inttostr(_GL113));
            }

            if(_GL114 > 0)
            {
                actStringMess("Флагманы " + GetPlName(4) + " уничтожили = " + _inttostr(_GL114));
            }

            if(_GL115 > 0)
            {
                actStringMess("Флагманы " + GetPlName(5) + " уничтожили = " + _inttostr(_GL115));
            }

            if(_GL116 > 0)
            {
                actStringMess("Флагманы " + GetPlName(6) + " уничтожили = " + _inttostr(_GL116));
            }

            if(_GL117 > 0)
            {
                actStringMess("Флагманы " + GetPlName(7) + " уничтожили = " + _inttostr(_GL117));
            }
        }

        // END
    CloseEvents();
CloseArbiter();